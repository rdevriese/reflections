How is the staging area different from the working directory and the repository? 
What value do you think it offers?
The working directory is just that, the directory that contains all the files 
currently checked out. The changes to these files may or may not be tracked by
Git, depending on whether or not they have been added and commited to Git.
Files in the Staging are have been marked for commitment to Git. This gives a way
to select the specific files from the working directory that will be commited on
the next commit command.

How can you use the staging area to make sure you have one commit per logical change?
Add all the files associated with the logical change to the commit area. Use diff to 
verify the changes are all associated with the same logical change, and commit them.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?
Branches are useful when making experimental changes that I'm not sure will work. They are also helpful when I have to make changes that will take a long time to do, such as adding in major feature content, but still having to maintain bug fixes in the main branch. They are also useful for release candidates that are going through testing, but development still needs to 
continue on the main branch.

How do the diagrams help you visualize the branch structure?
Err, they are diagrams so its I can visualize them? By drawing the commit history and branches
in a diagram its easier to see the branch structure and to see which commits are reachable 
from which branch. It's also easier to see where detached head checkouts are.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result of a merge is to combine the changes from both commits into a new 
commit, using a merge strategy to determine which changes get included.
